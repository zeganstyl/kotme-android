INSERT INTO `task` (`id`, `text`, `task`, `initial_code`) VALUES
(1, ' Этот остров довольно большой, и у нас есть только карта.\r\nНужно разобратся как же нам здесь ориентироваться.\r\n\r\n', 'Давайте вспомним как мы проходили азы в школе и познакомимся с нашим помощником Котлином.\r\n\r\nВыведите в консоль \"Привет Котлин!\"', 'fun main() {\r\n    ...\r\n}'),
(2, ' Нам придется оценить расстояние по карте, поэтому давайте придумаем как это сделать.\r\n', 'Напишите функцию, которая будет брать 4 аргумента: x1, y1, x2, y2 и вычислять расстояние между точками. Первая и вторая точки заданы как (x1, y1), (x2, y2). Аргументы и результат функции должны иметь тип Float.\r\n', 'import kotlin.math.*\r\n\r\nfun distance(x1: Float, y1: Float, x2: Float, y2: Float): Float {\r\n    ...\r\n}'),
(3, 'В инструкции сказано пройти 43 шага прямо, 81 шаг вправо, затем идите вперед до зеленого камня. Ох уж эти картографы... А вдруг мы собьемся со счета? Давайте доверемся Котлину, он за нас все посчитает!\r\n', 'Напишите две функции, одна из которых считает и выводит количество пройденных шагов, а вторая выдает результат когда мы дошли до цели. Первая функция принимает один целочисленный аргумент и выводит в консоль с каждой новой строки, например \"Шаг 1 идем далее\", \"Шаг 2 последний\". Вторая функция принимает на вход лямбду, проверяющую достигли ли мы цели на данном шаге или нет.', 'fun stepsCounting(...) {\r\n    ...\r\n}\r\n\r\nfun moveToGoal(goalIsClose: (step: Int) -> Boolean) {\r\n    ...\r\n}'),
(4, 'На этом острове нам придется переправиться через озеро, поэтому нам потребуется плот. Для его создания нам нужно определиться с необходимыми материалами. Для плота нужны 8 бревен и 20 лоз.\r\nА еще хочется что-нибудь пожарить. 5 штук рыбы и 2 кокоса вполне хватит. И нам нужно будет проверить имеется ли у нас всё необходимое.\r\n', 'Создайте функцию-расширение, которая выводит слово \"плот\", если среди предметов достаточно материалов для плота и слово \"обед\", если хватает еды. Назовите функцию checkCrafting. Функция будет вызываться по списку, представляющему имающиеся предметы. А результат должен быть в виде списка из предметов, которые можно создать из того что у нас есть.', 'fun checkItems(items: List<String>): List<String> {\r\n    ...\r\n}'),
(5, '', 'Создайте ассоциативный массив, взяв со входа список предметов, и для каждого типа предмета задайте в массиве их количество.', 'fun itemsCounting(items: List<String>): Map<String, Int> {\r\n    ...\r\n}'),
(6, ' Вы дошли до хижины, дверь была открыта. В хижине рядом со столом вы увидели ящик, в котором находился какой-то прибор. Судя по всему, рядом, лежит руководство к нему. Почитав руководство и включив прибор, вы поняли что там содержится список кодов с их значением.\r\n', 'Создайте класс с именем Device. Он должен содержать метод setCode, принимающий на вход целое число и строку со значением. Класс должен содержать метод getInfo, позволяющий по известному коду выдать строку с информацией. И класс должен иметь еще один метод, позволяющий получить список кодов - getCodes().', 'class Device {\r\n    ...\r\n}'),
(7, 'Пройдя дальше на отметке по карте вы обнаружили металлическую дверь. Вы нашли код который обозначен, как \"Вход в Убежище\", испробовали его, но это не сработало. Изучив прибор внимательней, вы увидели что в него можно вставлять разные карты памяти.\r\n', 'Возьмите класс Device из прошлого задания. Создайте новый класс Card для карты памяти и добавьте свойство card в Device. В классе Card перегрузите оператор доступа по индексу, задав ему на вход целое число, а на выходе строковое значение. И перегрузите оператор присваивания по индексу, который принимает целое число, строку и сохраняет эту пару в памяти.', 'class Device {\r\n    ...\r\n}\r\n\r\nclass Card {\r\n    ...\r\n}'),
(8, 'Пошарив по близости вы наткнулись на останки. В кармане вы нашли красную карту памяти. Вынув свою синюю карту, вы решили вставить красную в прибор и посмотреть какие там коды.\r\n', 'Красная карта должна работать схожим образом с синей. Поэтому создайте класс синей карты и красной. Наш старый класс Card переделайте в интерфейс ICard. Этот интерфейс унаследуйте в обеих картах памяти. ICard точно также должен содержать доступ и присваивание по индексу. Подготовьте реализацию интерфейса в каждом классе карты памяти. В классе Device поменяйте тип у свойства card.', 'Код...'),
(9, 'Вернувшись к двери, вы ввели код и дверь открылась. Ура, сокровища уже близко! Вы прошли дальше по коридору, открывая с помощью кодов разные двери, но помещения были обесточены. В итоге удалось найти кабинет, где работал компьютер, видимо от резервного питания. Включив компьютер, вы видите что для входа требуется USB-ключ и его нужно вставить. Осмотрев кабинет, вы нашли разные USB-устройства, но не знаете какое из них подойдет.\r\n', 'Создайте функцию с именем checkUSBToken, принимающую дженерик-параметр и входной объект типа Any. Проверьте соответствует ли входной объект классу USBToken, если да, то возвратите его с дженерик-типом, если нет, то верните null.', 'Код...'),
(10, 'Вы вошли в систему, посмотрев иконки на рабочем столе, вы увидели \"Системы охраны\", там вы нашли особую дверь, для которой требовались коды с зеленой карточки. Когда вы проходили мимо этой двери у неё не было клавиатуры для ввода, значит она открывается с помощью компьютера. Вы не знаете как вставить карту в компьютер, но в программе есть кнопка \"Ввести коды\". Вы нажали и там требуется ввести полный список кодов в формате HTML. Хм, что бы это значило? Посмотрев документацию, вы увидели пример и там просто требуется ввести подобный текст.\r\n', 'Создайте класс Tag, который будет обозначать HTML-элемент. А затем унаследуйте его в другие классы: Table, TR, TD, Html. Затем создайте соответствующие функции в классах для добавления элементов: table, tr, td. Напишите функцию html, создающую экземпляр класса Html. Таким образом создание HTML-страницы должно происходить через DSL, созданный вами.', 'Код...');
